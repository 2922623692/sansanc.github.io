<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://2922623692.github.io/sansanc.github.io/</id>
    <title>PuGuolin notes</title>
    <updated>2020-03-23T10:28:22.138Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://2922623692.github.io/sansanc.github.io/"/>
    <link rel="self" href="https://2922623692.github.io/sansanc.github.io/atom.xml"/>
    <subtitle>PuGuolin notes</subtitle>
    <logo>https://2922623692.github.io/sansanc.github.io/images/avatar.png</logo>
    <icon>https://2922623692.github.io/sansanc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, PuGuolin notes</rights>
    <entry>
        <title type="html"><![CDATA[随机数（random）]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/sui-ji-shu-random/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/sui-ji-shu-random/">
        </link>
        <updated>2020-03-23T10:28:08.000Z</updated>
        <content type="html"><![CDATA[<pre><code>生成0-10的随机数
import java.util.Random;
class a
{
    public static void main(String[] args)
    {
        Random random=new random();
        int a=Math.abs(random.nextInt()%10);
        system.out.println(a);
    }
}
</code></pre>
<pre><code>生成5-10的随机数
import java.util.Random;
class a
{
    public static void main(String[] args)
    {
        Random random=new Random();
        int a=Math.abs(random.nextInt()%6+5);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[匿名对象]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/ni-ming-dui-xiang/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/ni-ming-dui-xiang/">
        </link>
        <updated>2020-03-23T10:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>匿名对象就是只有右边的对象，内衣左边的名字和赋值运算符</p>
<p>注意:匿名对象只能使用唯一一次，下次再用不得不用再创建一个新对象<br>
使用建议：如果确定有一个对象只能使用唯一一次哪么就可以使用匿名对象</p>
<pre><code>class A
{
    public static void main(String[] args)
    {
        B b=new B();
        b.name=&quot;zhangsan&quot;;
        b.showname();
        System.out.println(&quot;------&quot;);
        
        //匿名对象
        new B().name=&quot;lisi&quot;;//我叫null
    }
}
class B
{
    string name;
    public void showname()
    {
        System.out.println(&quot;我叫&quot;+name);
    }
}

</code></pre>
<p>结果：</p>
<pre><code>我叫zhangsan
-------
我叫null
</code></pre>
<h4 id="匿名对象使用">匿名对象使用：</h4>
<pre><code>class Text
{
    public static void main(String[] args)
    {
        Scanner scanner=new Scanner(System.in);
        int num=scanner.nextInt();
        
        //匿名对象
        int num=nuw Scanner(System.in).nextInt();
        
        /*
        //使用一般方法传入参数
        Scanner sc=new Scanner(String.in);
        methodparam(sc);
        */
        
        //使用匿名对象传参数
        methodparam(new Scanner(System.in));
    }
    
    public static void methodparm(Scanner sc)
    {
        int num=sc.nextInt();
        System.out.println(&quot;你输入的是：&quot;+num);
    }
}
</code></pre>
<p>结果：</p>
<pre><code>1
你输入的是：1
</code></pre>
<h2 id="arraylist">arraylist</h2>
<ul>
<li>
<p>数组长度不可改变</p>
</li>
<li>
<p>但是arraylist集合的长度是可以随意改变的</p>
</li>
<li>
<p>对于arratlist来说，有一个尖括号<E>代表泛型</p>
</li>
<li>
<p>泛型：也就是装在集合当中所有的元素，全都是统一的什么数据类型</p>
</li>
<li>
<p>注意，泛型只能是引用类型，不能是基础类型</p>
</li>
</ul>
<p>注意事项：</p>
<ul>
<li>对于arraylist集合来说，直接打印得到的不是地址值，而是内容。</li>
<li>如果内容为空，得到空的中括号[]</li>
</ul>
<pre><code>class a
{
    public static void main(String[] args)
    {
        Arraylist&lt;String&gt; list=new ArratList&lt;&gt;();
        list.add(&quot;zhangsan`&quot;);
    }
}
</code></pre>
<h4 id="arraylist常用方法">arraylist常用方法</h4>
<p>public boolean add(E a)//相机和中添加元素，参数的类型和泛型一致。返回值代表添加是否成功</p>
<p>备注：对于arraylist集合来说。add添加动作一定成功，所以返回值可用可不用</p>
<pre><code>class Text
{
    public static void main(String90 args)
    {
        ArrayList&lt;String&gt; list =new ArrayList&lt;&gt;();
        
        //向集合中添加元素：add
        boolean success=list.add(&quot;zhangsan&quot;);
        System.out.println(list);
        System.out.println(&quot;添加动作是否成功：&quot;+success);//true
    }
}
</code></pre>
<p>结果：</p>
<pre><code>[zhangsan]
添加动作是否成功：true
</code></pre>
<p>public E get（int index）//从集合当中获取元素，参数是索引编号，返回值就是对应未知得到元素</p>
<p>public E remove(int index)//从集合当中删除元素，参数是索引编号，返回值就是被删除掉的袁术</p>
<p>public int size()//获取集合的尺寸长度，返回值是集合中包含的元素个数。</p>
<h4 id="存储内存基本数据">存储内存基本数据</h4>
<p>泛型只能是引用数据类型，不是基本数据类型</p>
<p>从jdk1.5+ 支持自动装箱，自动拆箱</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<pre><code>public Text{
    public static void main(String[] args)
    {
        ArrayList&lt;Integer&gt; listc=new ArrayList&lt;&gt;();
        listc.add(100);
        listc.add(200);
        System.out.println(listc);
        int a=listc.get(1);//拿到第一个
        System.out.println(&quot;第一个元素是：&quot;+a);
    }
}
</code></pre>
<p>结果：</p>
<pre><code>[100,200]
第一个元素是：100
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 多态]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-duo-tai/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-duo-tai/">
        </link>
        <updated>2020-03-21T06:13:29.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>向上转型（apcasting）
<ul>
<li>子类型-&gt;父类型</li>
<li>又被称为：自动类型转换</li>
</ul>
</li>
<li>向下转型（downcasting）
<ul>
<li>父类型-&gt;子类型</li>
<li>又被称为:强制类型转换</li>
</ul>
</li>
</ul>
<h4 id="instanceof运算符通常和判断语句连用">instanceof运算符通常和判断语句连用</h4>
<p>语法格式：</p>
<pre><code>(引用 instanceof 数据类型名)
</code></pre>
<p>以上运算符结果：</p>
<pre><code>true/false
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 方法覆盖]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-fang-fa-fu-gai/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-fang-fa-fu-gai/">
        </link>
        <updated>2020-03-21T06:13:11.000Z</updated>
        <content type="html"><![CDATA[<h4 id="条件">条件</h4>
<ul>
<li>方法重写发生在具有继承关系的父子类之间</li>
<li>返回值相同，形参列表相同，方法名相同</li>
<li>访问权限不能更低，只能更高</li>
<li>执行异常只能更多，不能更少</li>
</ul>
<h5 id="注">注：</h5>
<ul>
<li>私有方法不能覆盖</li>
<li>构造方法不能覆盖</li>
<li>静态方法不能覆盖</li>
<li>覆盖只针对方法，不谈属性</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java static关键字]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-static-guan-jian-zi/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-static-guan-jian-zi/">
        </link>
        <updated>2020-03-21T06:12:21.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>没有static关键字的方法被称之为实例方法&quot;.引用&quot;</li>
<li>没有static的关键字被称之为实例变量</li>
<li>当一个行为/动作执行过程需要一个对象参与，那么这个方法一定要定义为实例方法，不带static<br>
继承(extends)</li>
</ol>
<h4 id="作用代码复用">作用：代码复用</h4>
<ul>
<li>有了继承才有之后的方法覆盖和多态机制</li>
<li>继承语法</li>
</ul>
<pre><code>修饰符列表 class 子类名 entends 父类名{
    类体=属性+方法
}
</code></pre>
<h5 id="注私有的构造方法不支持继承">注：私有的，构造方法，不支持继承</h5>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 构造方法]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/gou-zao-fang-fa/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/gou-zao-fang-fa/">
        </link>
        <updated>2020-03-21T06:12:01.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code>修饰符列表 构造方法名(形式参数列表)
{
    构造方法体;
}
</code></pre>
<p>注:<br>
对于构造方法来说，返回值类型不休要指定并且也不能写void，只要写了void，那么这个方法就成为普通方法</p>
<p>构造方法作业：通过构造方法调用，可以创建对象</p>
<h4 id="调用">调用：</h4>
<pre><code>new 构造方法(实参列表);
</code></pre>
<p>注：构造方法支持方法重载</p>
<h2 id="this关键字">this关键字</h2>
<ol>
<li>this关键字翻译为 这个</li>
<li>this是一个引用，this是一个变量，this变量中保存了内存的地址指向本身，this存储在java堆内存中java对象内部</li>
<li>创建多个对象就有多个this</li>
<li>this出现在实例方法中，this表示指向当前对象执行这个对象的对象（this代表当前对象）</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 面向对象的封装priate]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-mian-xiang-dui-xiang-de-feng-zhuang-priate/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-mian-xiang-dui-xiang-de-feng-zhuang-priate/">
        </link>
        <updated>2020-03-21T06:11:36.000Z</updated>
        <content type="html"><![CDATA[<pre><code>private int A()
{
    
}
</code></pre>
<p>set方法（修改）</p>
<pre><code>public int a;
public void steA(int a)
{
    this.a=a;
}
</code></pre>
<p>get方法（读取）</p>
<pre><code>public int getA(int a)
{
    return a;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 类的定义]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-lei-de-ding-yi/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-lei-de-ding-yi/">
        </link>
        <updated>2020-03-21T06:10:59.000Z</updated>
        <content type="html"><![CDATA[<h4 id="语法结构">语法结构</h4>
<pre><code>修饰符列表 class 类名{
    
}
</code></pre>
<p>例如</p>
<pre><code>class Text01
{
    
}
</code></pre>
<h4 id="属性通常是对象状态的信息">属性（通常是对象状态的信息）</h4>
<p>属性通常采用标量方式来定义</p>
<h5 id="在类体当中方法体之外的标量被称为成员变量成员变量没有复制系统默认赋初值一切向0看齐">在类体当中，方法体之外的标量被称为成员变量，成员变量没有复制，系统默认赋初值：一切向0看齐</h5>
<h4 id="new定义">new定义</h4>
<pre><code>new 类名();
</code></pre>
<p><img src="9E8120D44D704B3F85B265CDB998A67E" alt="Jvm" loading="lazy"><br>
实例变量不能通过类名的方式访问</p>
<p>静态变量不能通过引用的方式访问</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java方法定义]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-fang-fa-ding-yi/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-fang-fa-ding-yi/">
        </link>
        <updated>2020-03-21T06:10:02.000Z</updated>
        <content type="html"><![CDATA[<pre><code>访问修饰符 返回值类型 方法名(参数列表)
{
    方法体;
}
</code></pre>
<p>例如</p>
<pre><code>public int a;
public static void A(String a)
{
    this.a=a;
}
</code></pre>
<h4 id="注">注：</h4>
<h4 id="1有static静态变量存在方法区默认占内存的方法调用">1.有static(静态变量，存在方法区，默认占内存)的方法调用：</h4>
<pre><code>类名.方法名(实参);
</code></pre>
<p>例如:</p>
<pre><code>class Text01
{
    public static void A()
    {
        System.out.println(&quot;helloword&quot;);
    }
}
class Text02
{
    public static void main(String[] args)
    {
        A();
    }
}
</code></pre>
<h4 id="2没有static实例变量未穿件对象时默认不占内存空间方法调用">2.没有static(实例变量，未穿件对象时默认不占内存空间)方法调用:</h4>
<pre><code>引用.方法名();
</code></pre>
<p>例如：</p>
<pre><code>class Text01
{
    public void A()
    {
        System.out.println(&quot;hello word&quot;);
    }
}
public Text02
{
    public static void main(String[] args)
    {
        Text01 text01=new Text01();
        text01.A();
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java 接收用户输入scanner]]></title>
        <id>https://2922623692.github.io/sansanc.github.io/post/java-jie-shou-yong-hu-shu-ru-scanner/</id>
        <link href="https://2922623692.github.io/sansanc.github.io/post/java-jie-shou-yong-hu-shu-ru-scanner/">
        </link>
        <updated>2020-03-21T06:09:37.000Z</updated>
        <content type="html"><![CDATA[<pre><code>class a
{
    public static void main(String[] args)
    {
        Scanner scanner=new Scanner();
        scanner.nextInt();//int类型
        scanner.next();//string类型
        scanner.nextDouble();//double类型
    }
}
</code></pre>
]]></content>
    </entry>
</feed>